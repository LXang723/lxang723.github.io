import{_ as o,c as k,f as e,a as s,b as i,d as l,e as d,r as a,o as p}from"./app-CgZO7uFy.js";const r={},h={class:"contains-task-list"},b={class:"task-list-item"},m={href:"https://refactoringguru.cn/design-patterns/catalog",target:"_blank",rel:"noopener noreferrer"};function x(u,t){const c=a("RouteLink"),n=a("ExternalLinkIcon");return p(),k("div",null,[t[5]||(t[5]=e('<p>设计模式：经过实践验证的解决方案。</p><h2 id="设计模式分类" tabindex="-1"><a class="header-anchor" href="#设计模式分类"><span>设计模式分类</span></a></h2><h3 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式"><span>创建型模式</span></a></h3><p>提供创建对象的机制， 增加已有代码的灵活性和可复用性。</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 工厂方法 / Factory Method</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 抽象工厂 / Abstract Factory</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 生成器 / Builder</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 原型 / Prototype</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 单例 / Singleton</li></ul><h3 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式"><span>结构型模式</span></a></h3><p>介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。</p>',7)),s("ul",h,[t[3]||(t[3]=e('<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 适配器 / Adapter</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 桥接 / Bridge</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 组合 / Composite</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 装饰 / Decorator</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 外观 / Facade</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 享元 / Flyweight</li>',6)),s("li",b,[t[1]||(t[1]=s("input",{class:"task-list-item-checkbox",checked:"",disabled:"",type:"checkbox"},null,-1)),t[2]||(t[2]=i()),l(c,{to:"/series/design-pattern/proxy.html"},{default:d(()=>t[0]||(t[0]=[i("代理 / Proxy")])),_:1})])]),t[6]||(t[6]=e('<h3 id="行为模式" tabindex="-1"><a class="header-anchor" href="#行为模式"><span>行为模式</span></a></h3><p>负责对象间的高效沟通和职责委派。</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 责任链 / Chain of Responsibility</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 命令 / Command</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 迭代器 / Iterator</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 中介者 / Mediator</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 备忘录 / Memento</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 观察者 / Observer</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 状态 / State</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 策略 / Strategy</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 模板方法 / Template Method</li><li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox"> 访问者 / Visitor</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>',4)),s("p",null,[s("a",m,[t[4]||(t[4]=i("设计模式目录")),l(n)])])])}const g=o(r,[["render",x],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/series/design-patterns/","title":"常用设计模式","lang":"en-US","frontmatter":{"title":"常用设计模式"},"headers":[{"level":2,"title":"设计模式分类","slug":"设计模式分类","link":"#设计模式分类","children":[{"level":3,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[]},{"level":3,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":3,"title":"行为模式","slug":"行为模式","link":"#行为模式","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1739512436000,"updatedTime":1739512436000,"contributors":[{"name":"柒月廿三","email":"lxang723@163.com","commits":1}]},"filePathRelative":"series/design-patterns/index.md"}');export{g as comp,f as data};
