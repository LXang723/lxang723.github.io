import{_ as l,c as a,a as g,b as t,e as r,f as d,d as e,r as i,o as c}from"./app-C3BBJh1h.js";const u={},b={href:"https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/features.html#features.developing-auto-configuration",target:"_blank",rel:"noopener noreferrer"},m={href:"https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/features.html#features.external-config.encrypting",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/howto.html#howto.application.customize-the-environment-or-application-context",target:"_blank",rel:"noopener noreferrer"};function S(B,o){const s=i("RouteLink"),p=i("Badge"),n=i("ExternalLinkIcon");return c(),a("div",null,[o[5]||(o[5]=g('<p>在 <strong>Spring Boot</strong> 中，<strong>&quot;Boot&quot;</strong> 代表的是 <strong>&quot;Bootstrap&quot;</strong>（引导）的意思。这个词来源于计算机科学中的术语，通常表示启动或初始化一个系统或应用程序的过程。Spring Boot 的设计目标就是帮助开发者快速启动和运行 Spring 应用程序，因此它的名字中的 &quot;Boot&quot; 强调了其<strong>快速启动</strong>和<strong>简化配置</strong>的特性。</p><hr><h3 id="spring-boot-的核心目标" tabindex="-1"><a class="header-anchor" href="#spring-boot-的核心目标"><span>Spring Boot 的核心目标</span></a></h3><ol><li><p><strong>简化 Spring 应用的初始搭建和开发</strong><br> Spring Boot 通过自动配置和默认值，减少了传统 Spring 应用中繁琐的 XML 配置和手动依赖管理。</p></li><li><p><strong>快速启动和运行</strong><br> Spring Boot 提供了内嵌的 Web 服务器（如 Tomcat、Jetty）和默认配置，使得开发者可以直接运行一个独立的、生产级别的应用程序，而无需额外部署到外部服务器。</p></li><li><p><strong>约定优于配置</strong><br> Spring Boot 遵循“约定优于配置”的原则，提供了合理的默认配置，开发者只需在需要时覆盖这些配置即可。</p></li><li><p><strong>降低开发门槛</strong><br> 通过 Starter 依赖和自动配置，Spring Boot 使得开发者可以更专注于业务逻辑，而不需要过多关注底层框架的集成和配置。</p></li></ol><hr><h3 id="boot-的具体体现" tabindex="-1"><a class="header-anchor" href="#boot-的具体体现"><span>&quot;Boot&quot; 的具体体现</span></a></h3><ol><li><p><strong>内嵌服务器</strong><br> Spring Boot 应用可以直接打包成可执行的 JAR 文件，并内嵌了 Web 服务器（如 Tomcat），因此可以通过 <code>java -jar</code> 命令快速启动应用。</p></li><li><p><strong>自动配置</strong><br> Spring Boot 根据项目的依赖自动配置 Spring 框架和第三方库。例如，如果项目中引入了 <code>spring-boot-starter-web</code>，Spring Boot 会自动配置 Spring MVC 和相关的 Bean。</p></li><li><p><strong>Starter 依赖</strong><br> Spring Boot 提供了一系列 Starter 依赖（如 <code>spring-boot-starter-web</code>、<code>spring-boot-starter-data-jpa</code>），这些依赖封装了常见的库和配置，使得开发者可以快速引入所需功能。</p></li><li><p><strong>开发工具支持</strong><br> Spring Boot 提供了开发工具（如 <code>spring-boot-devtools</code>），支持热部署、自动重启等功能，进一步提升了开发效率。</p></li></ol><p>目录：</p>',8)),t("ul",null,[t("li",null,[r(s,{to:"/series/interview/spring-boot/external-config.html"},{default:d(()=>o[0]||(o[0]=[e("Spring Boot 配置文件加载优先级")])),_:1})])]),t("p",null,[o[1]||(o[1]=e("Spring Boot Reference Documentation - ")),r(p,{type:"tip",text:"v2.7.18",vertical:"middle"})]),t("p",null,[t("a",b,[o[2]||(o[2]=e("Creating Your Own Auto-configuration")),r(n)])]),o[6]||(o[6]=t("p",null,"Creating Your Own Starter",-1)),t("p",null,[t("a",m,[o[3]||(o[3]=e("Encrypting Properties")),r(n)])]),t("p",null,[t("a",f,[o[4]||(o[4]=e("Customize the Environment or ApplicationContext Before It Starts")),r(n)])])])}const x=l(u,[["render",S],["__file","index.html.vue"]]),v=JSON.parse('{"path":"/series/interview/spring-boot/","title":"面试刷题之 Spring Boot 篇","lang":"en-US","frontmatter":{"title":"面试刷题之 Spring Boot 篇"},"headers":[{"level":3,"title":"Spring Boot 的核心目标","slug":"spring-boot-的核心目标","link":"#spring-boot-的核心目标","children":[]},{"level":3,"title":"\\"Boot\\" 的具体体现","slug":"boot-的具体体现","link":"#boot-的具体体现","children":[]}],"git":{"createdTime":1748218348000,"updatedTime":1748218348000,"contributors":[{"name":"柒月廿三","email":"lxang723@163.com","commits":1}]},"filePathRelative":"series/interview/spring-boot/index.md"}');export{x as comp,v as data};
