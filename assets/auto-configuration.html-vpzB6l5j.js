import{_ as e,c as t,b as a,f as o,d as i,a as p,o as l,r as c}from"./app-BLuAdOCx.js";const r={},u={href:"https://blog.csdn.net/h2503652646/article/details/107912486",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const s=c("ExternalLinkIcon");return l(),t("div",null,[a("p",null,[a("a",u,[n[0]||(n[0]=o("Spring Boot自动配置原理浅析")),i(s)])]),n[1]||(n[1]=p(`<p>Spring Boot 的自动配置是其核心特性之一，它大大<strong>简化了 Spring 应用的配置过程</strong>。通过自动配置，Spring Boot 能够根据项目的依赖和当前环境，自动配置 Spring 应用的各个组件，<strong>使得开发者无需手动编写大量的配置文件</strong>。</p><h2 id="自动配置的工作原理" tabindex="-1"><a class="header-anchor" href="#自动配置的工作原理"><span>自动配置的工作原理</span></a></h2><p>Spring Boot 的自动配置机制依赖于 <code>@EnableAutoConfiguration</code> 注解，通常是通过 <code>@SpringBootApplication</code> 注解来启用的。这个注解包括了 <code>@EnableAutoConfiguration</code>，意味着 Spring Boot 会自动配置应用所需的各个组件。</p><p>自动配置的核心思想是：Spring Boot 会根据项目的 classpath 中的内容、环境变量、配置文件等来判断需要配置哪些 Spring Bean。</p><h2 id="springbootapplication-的作用" tabindex="-1"><a class="header-anchor" href="#springbootapplication-的作用"><span>@SpringBootApplication 的作用</span></a></h2><p><code>@SpringBootApplication</code> 是一个组合注解，包含了以下三个注解：</p><ul><li><code>@SpringBootConfiguration</code>：标记当前类为配置类，等同于 <code>@Configuration</code>。</li><li><code>@EnableAutoConfiguration</code>：启用自动配置。</li><li><code>@ComponentScan</code>：启用组件扫描，Spring Boot 会扫描当前包及其子包中的组件。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@Documented</span></span>
<span class="line"><span class="token annotation punctuation">@Inherited</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootConfiguration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableAutoConfiguration</span></span>
<span class="line"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动配置的关键组成部分" tabindex="-1"><a class="header-anchor" href="#自动配置的关键组成部分"><span>自动配置的关键组成部分</span></a></h2><h3 id="_1-enableautoconfiguration-注解" tabindex="-1"><a class="header-anchor" href="#_1-enableautoconfiguration-注解"><span>1. @EnableAutoConfiguration 注解</span></a></h3><p><code>@EnableAutoConfiguration</code> 是 Spring Boot 的自动配置的核心注解，它会触发 Spring Boot 的自动配置机制。该注解背后实际上是通过 <code>@Import(AutoConfigurationImportSelector.class)</code> 引入了自动配置类。</p><h3 id="_2-spring-factories-文件" tabindex="-1"><a class="header-anchor" href="#_2-spring-factories-文件"><span>2. spring.factories 文件</span></a></h3><p>Spring Boot 的自动配置是基于 SPI（服务提供接口）机制的，配置类被定义在 <code>META-INF/spring.factories</code> 文件中。例如，Spring Boot 的一些自动配置类会在此文件中被声明，Spring Boot 在启动时会加载这些配置类。</p><h3 id="_3-configuration-注解的自动配置类" tabindex="-1"><a class="header-anchor" href="#_3-configuration-注解的自动配置类"><span>3. @Configuration 注解的自动配置类</span></a></h3><p>Spring Boot 的自动配置类通常都使用 <code>@Configuration</code> 注解，这意味着它们会作为 Spring 上下文的一部分被加载。自动配置类一般都是根据应用的依赖来选择性地配置相关的 Bean。</p><h3 id="_4-条件注解-conditional" tabindex="-1"><a class="header-anchor" href="#_4-条件注解-conditional"><span>4. 条件注解（@Conditional）</span></a></h3><p>Spring Boot 的自动配置类通常会使用 <code>@Conditional</code> 注解来决定某个配置是否生效。常见的条件注解有：</p><ul><li><code>@ConditionalOnClass</code>：只有类路径中存在某个特定的类时才会进行配置。</li><li><code>@ConditionalOnMissingBean</code>：当容器中不存在某个特定的 Bean 时，才会进行配置。</li><li><code>@ConditionalOnProperty</code>：根据某个配置属性的值来决定是否启用该配置。</li><li><code>@ConditionalOnExpression</code>：根据 Spring EL 表达式的结果来决定是否启用配置。</li></ul><h2 id="常见的自动配置示例" tabindex="-1"><a class="header-anchor" href="#常见的自动配置示例"><span>常见的自动配置示例</span></a></h2><h3 id="_1-数据源配置" tabindex="-1"><a class="header-anchor" href="#_1-数据源配置"><span>1. 数据源配置</span></a></h3><p>如果你的项目中引入了数据库相关的依赖（比如 H2、MySQL、PostgreSQL），Spring Boot 会自动配置数据源（<code>DataSource</code>）和相关的数据库连接池。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@EnableAutoConfiguration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 根据 classpath 中的配置自动选择数据源</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-视图解析器-thymeleaf、freemarker" tabindex="-1"><a class="header-anchor" href="#_2-视图解析器-thymeleaf、freemarker"><span>2. 视图解析器（Thymeleaf、Freemarker）</span></a></h3><p>如果项目中引入了 <code>Thymeleaf</code> 或 <code>Freemarker</code> 相关的依赖，Spring Boot 会自动配置视图解析器，且不需要手动配置。</p><h3 id="_3-web-配置" tabindex="-1"><a class="header-anchor" href="#_3-web-配置"><span>3. Web 配置</span></a></h3><p>如果项目包含了 <code>spring-boot-starter-web</code> 依赖，Spring Boot 会自动配置嵌入式的 Tomcat 或 Jetty 等 Web 容器，且可以根据项目中的配置自动设置静态资源、Servlet 等。</p><h3 id="_4-spring-security-配置" tabindex="-1"><a class="header-anchor" href="#_4-spring-security-配置"><span>4. Spring Security 配置</span></a></h3><p>如果引入了 <code>spring-boot-starter-security</code> 依赖，Spring Boot 会自动配置基本的安全机制，如基于表单的登录、HTTP Basic 验证等。</p><h2 id="自定义和禁用自动配置" tabindex="-1"><a class="header-anchor" href="#自定义和禁用自动配置"><span>自定义和禁用自动配置</span></a></h2><p>Spring Boot 提供了灵活的方式让开发者根据需求自定义自动配置，或者禁用一些自动配置。</p><h3 id="_1-禁用自动配置" tabindex="-1"><a class="header-anchor" href="#_1-禁用自动配置"><span>1. 禁用自动配置</span></a></h3><p>如果某个自动配置不适合你的应用，或者你想自己配置某个 Bean，你可以使用 <code>@EnableAutoConfiguration</code> 注解的 <code>exclude</code> 属性来禁用自动配置：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-自定义配置" tabindex="-1"><a class="header-anchor" href="#_2-自定义配置"><span>2. 自定义配置</span></a></h3><p>你可以创建一个配置类，手动配置 Bean，覆盖掉 Spring Boot 的自动配置。Spring Boot 会首先尝试自动配置，如果某些自动配置的 Bean 不存在，它会让你自己定义。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomDataSourceConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 自定义数据源配置</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用-conditional-注解自定义条件" tabindex="-1"><a class="header-anchor" href="#_3-使用-conditional-注解自定义条件"><span>3. 使用 <code>@Conditional</code> 注解自定义条件</span></a></h3><p>你可以根据不同的条件来自定义自动配置。例如，可以通过配置属性、类路径中的类、环境变量等来选择是否启用某个 Bean 的配置。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;custom.feature.enabled&quot;</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFeatureConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">CustomFeature</span> <span class="token function">customFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomFeature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Spring Boot 的自动配置大大简化了应用配置过程，通过分析项目的依赖关系和环境变量，自动配置所需的 Bean 和组件。通过 <code>@EnableAutoConfiguration</code>、<code>spring.factories</code> 和条件注解，Spring Boot 实现了灵活且可定制的自动配置机制，极大地提高了开发效率。同时，Spring Boot 也允许开发者禁用某些自动配置或进行自定义配置，满足不同的需求。</p>`,41))])}const h=e(r,[["render",d],["__file","auto-configuration.html.vue"]]),v=JSON.parse('{"path":"/blogs/spring-boot/auto-configuration.html","title":"Spring Boot 自动配置","lang":"en-US","frontmatter":{"title":"Spring Boot 自动配置","date":"2019-04-09T00:00:00.000Z","categories":["SpringBoot"]},"headers":[{"level":2,"title":"自动配置的工作原理","slug":"自动配置的工作原理","link":"#自动配置的工作原理","children":[]},{"level":2,"title":"@SpringBootApplication 的作用","slug":"springbootapplication-的作用","link":"#springbootapplication-的作用","children":[]},{"level":2,"title":"自动配置的关键组成部分","slug":"自动配置的关键组成部分","link":"#自动配置的关键组成部分","children":[{"level":3,"title":"1. @EnableAutoConfiguration 注解","slug":"_1-enableautoconfiguration-注解","link":"#_1-enableautoconfiguration-注解","children":[]},{"level":3,"title":"2. spring.factories 文件","slug":"_2-spring-factories-文件","link":"#_2-spring-factories-文件","children":[]},{"level":3,"title":"3. @Configuration 注解的自动配置类","slug":"_3-configuration-注解的自动配置类","link":"#_3-configuration-注解的自动配置类","children":[]},{"level":3,"title":"4. 条件注解（@Conditional）","slug":"_4-条件注解-conditional","link":"#_4-条件注解-conditional","children":[]}]},{"level":2,"title":"常见的自动配置示例","slug":"常见的自动配置示例","link":"#常见的自动配置示例","children":[{"level":3,"title":"1. 数据源配置","slug":"_1-数据源配置","link":"#_1-数据源配置","children":[]},{"level":3,"title":"2. 视图解析器（Thymeleaf、Freemarker）","slug":"_2-视图解析器-thymeleaf、freemarker","link":"#_2-视图解析器-thymeleaf、freemarker","children":[]},{"level":3,"title":"3. Web 配置","slug":"_3-web-配置","link":"#_3-web-配置","children":[]},{"level":3,"title":"4. Spring Security 配置","slug":"_4-spring-security-配置","link":"#_4-spring-security-配置","children":[]}]},{"level":2,"title":"自定义和禁用自动配置","slug":"自定义和禁用自动配置","link":"#自定义和禁用自动配置","children":[{"level":3,"title":"1. 禁用自动配置","slug":"_1-禁用自动配置","link":"#_1-禁用自动配置","children":[]},{"level":3,"title":"2. 自定义配置","slug":"_2-自定义配置","link":"#_2-自定义配置","children":[]},{"level":3,"title":"3. 使用 @Conditional 注解自定义条件","slug":"_3-使用-conditional-注解自定义条件","link":"#_3-使用-conditional-注解自定义条件","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1736081154000,"updatedTime":1737085347000,"contributors":[{"name":"柒月廿三","email":"lxang723@163.com","commits":1}]},"filePathRelative":"blogs/spring-boot/auto-configuration.md"}');export{h as comp,v as data};
