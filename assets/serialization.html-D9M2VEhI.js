import{_ as e,c as t,f as p,a as s,b as l,d as o,o as c,r as i}from"./app-B_nsCYxu.js";const r={},u={href:"https://cloud.tencent.com/developer/article/1655892",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const a=i("ExternalLinkIcon");return c(),t("div",null,[n[4]||(n[4]=p(`<h2 id="对象序列化-object-serialization" tabindex="-1"><a class="header-anchor" href="#对象序列化-object-serialization"><span>对象序列化（Object Serialization）</span></a></h2><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">《码出高效：Java 开发手册》P64：2.3.7 序列化</p><p>内存中的数据对象只有转换为二进制流才可以进行数据持久化和网络传输。 <strong>将数据对象转换为二进制流的过程称为对象的序列化（Serialization）。 反之，将二进制流恢复为数据对象的过程称为反序列化（Deserialization）。</strong></p></div><p><strong>序列化</strong>（Serialization）是将对象或数据结构转换为一系列字节的过程，以便将其存储或通过网络传输。这一过程在不同的编程语言中有不同的实现和用途，但基本的理念都是一致的。序列化后，数据被“扁平化”成可以流传输或持久化的格式，这个格式通常是标准的二进制流、JSON、XML等。</p><p>在大多数编程语言中，序列化是为了实现以下目的：</p><ol><li><strong>持久化</strong>：将内存中的数据结构（如对象）存储到磁盘或数据库中。</li><li><strong>网络通信</strong>：通过网络传输对象，将对象的字节流作为网络数据发送。</li><li><strong>缓存</strong>：在缓存系统中以序列化形式存储对象，方便后续快速读取。</li></ol><h2 id="java-中的序列化" tabindex="-1"><a class="header-anchor" href="#java-中的序列化"><span>Java 中的序列化</span></a></h2><p>在 Java 中，序列化是一个非常常见且重要的概念，尤其是在网络编程和持久化存储中。Java 提供了内置的支持，通过 <code>java.io.Serializable</code> 接口和相关的类（如 <code>ObjectOutputStream</code> 和 <code>ObjectInputStream</code>）来进行序列化和反序列化。</p><h3 id="_1-serializable-接口" tabindex="-1"><a class="header-anchor" href="#_1-serializable-接口"><span>1. <strong>Serializable 接口</strong></span></a></h3><p>Java 提供了一个标记接口 <code>Serializable</code>，它指示一个类的对象可以被序列化。如果一个类的对象需要被序列化，它必须实现 <code>Serializable</code> 接口。这个接口本身不包含任何方法，它的存在是为了让 Java 的序列化机制知道该类的对象是可以序列化的。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Constructor, Getters and Setters</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-objectoutputstream-和-objectinputstream" tabindex="-1"><a class="header-anchor" href="#_2-objectoutputstream-和-objectinputstream"><span>2. <strong>ObjectOutputStream 和 ObjectInputStream</strong></span></a></h3><p>在 Java 中，序列化的过程通常通过 <code>ObjectOutputStream</code> 类来实现，该类将对象写入输出流；反序列化的过程则是通过 <code>ObjectInputStream</code> 类实现，从输入流中读取对象。</p><ul><li><strong>序列化</strong>：使用 <code>ObjectOutputStream</code> 将对象写入流。</li><li><strong>反序列化</strong>：使用 <code>ObjectInputStream</code> 从流中读取对象。</li></ul><p><strong>序列化示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializationExample</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 序列化对象</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;person.ser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>反序列化示例：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeserializationExample</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 反序列化对象</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;person.ser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-序列化的细节与特性" tabindex="-1"><a class="header-anchor" href="#_3-序列化的细节与特性"><span>3. <strong>序列化的细节与特性</strong></span></a></h3><ul><li><strong><code>serialVersionUID</code></strong>：为了确保反序列化时的兼容性，Java 提供了一个 <code>serialVersionUID</code> 静态变量。这个值用于验证序列化和反序列化时版本的兼容性。如果类的结构发生变化（例如字段的增加或删除），则反序列化时可以通过 <code>serialVersionUID</code> 来检查是否兼容，避免反序列化错误。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>瞬态字段 (<code>transient</code>)</strong>：如果类中的某个字段不希望被序列化，可以使用 <code>transient</code> 关键字标记该字段。在序列化过程中，带有 <code>transient</code> 关键字的字段会被忽略，反序列化时这些字段会被恢复为默认值。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>自定义序列化方法</strong>：Java 允许类实现 <code>writeObject()</code> 和 <code>readObject()</code> 方法，来控制序列化和反序列化的过程。例如，你可以在 <code>writeObject()</code> 中处理字段的序列化，或在 <code>readObject()</code> 中进行数据恢复操作。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    out<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 自定义序列化过程</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span></span>
<span class="line">    in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 自定义反序列化过程</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-序列化的用途" tabindex="-1"><a class="header-anchor" href="#_4-序列化的用途"><span>4. <strong>序列化的用途</strong></span></a></h3><ul><li><strong>分布式应用</strong>：在分布式系统中，通过序列化对象，可以将对象在不同的节点之间传输。例如，RMI（远程方法调用）和 Java EE 的 EJB（企业 Java Beans）中，都广泛使用了序列化。</li><li><strong>持久化存储</strong>：Java 序列化提供了一种简便的方式来将对象存储在磁盘上。通过文件流，你可以将对象序列化存储，并在以后加载时反序列化。</li><li><strong>缓存</strong>：将序列化的对象存入内存中，作为缓存进行加速访问。</li></ul><h3 id="_5-序列化的缺点" tabindex="-1"><a class="header-anchor" href="#_5-序列化的缺点"><span>5. <strong>序列化的缺点</strong></span></a></h3><p>虽然序列化非常方便，但也有一些缺点：</p><ul><li><strong>性能问题</strong>：序列化和反序列化的过程需要消耗时间和内存，特别是对于复杂对象。大量数据序列化会影响性能。</li><li><strong>不适用所有对象</strong>：并不是所有对象都能被序列化。例如，<code>Thread</code>、<code>Socket</code> 等类不能被序列化，因为它们包含与操作系统相关的资源。</li><li><strong>版本兼容性问题</strong>：当对象的类结构发生变化时，旧版本的对象可能无法反序列化为新版本的类，尤其是当字段变化时。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Java 中的序列化是将对象转化为字节流的过程，广泛应用于对象的持久化存储、网络传输和缓存等场景。虽然 Java 提供了简便的序列化机制，但也需要注意其性能影响和版本兼容性问题。理解如何在 Java 中使用序列化及反序列化，能够帮助我们更好地处理对象存储和传输的需求。</p><p>应用场景：包括网络传输、远程调用、持久化存储（如保存到文件或数据库）、以及分布式系统中数据交换。<br> Java 序列化关键类和接口：ObjectOutputStream 用于序列化，ObjectInputStream 用于反序列化。类必须实现 Serializable 接口才能被序列化。<br> transient 关键字：在序列化过程中，有些字段不需要被序列化，例如敏感数据，可以使用 transient 关键字标记不需要序列化的字段。<br> serialVersionUID：每个 Serializable 类都应该定义一个 serialVersionUID，用于在反序列化时验证版本一致性。 如果没有明确指定，Java 会根据类的定义自动生成一个 UID，版本不匹配可能导致反序列化失败。<br> 序列化性能问题：Java 的默认序列化机制可能比较慢，尤其是对于大规模分布式系统，可能会选择更加高效的序列化框架（如 Protobuf、Kryo）。<br> 安全性：反序列化是一个潜在的安全风险，因为通过恶意构造的字节流，可能会加载不安全的类或执行不期望的代码。因此，反序列化过程需要进行输入验证，避免反序列化漏洞。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2>`,33)),s("ul",null,[n[1]||(n[1]=s("li",null,"《Effective Java（原书第3版）》P239：第12章 序列化",-1)),n[2]||(n[2]=s("li",null,"《Java 核心技术 卷 Ⅱ 高级特性（原书第12版）》P70：2.3 对象输入/输出流与序列化",-1)),n[3]||(n[3]=s("li",null,"《码出高效：Java 开发手册》P64：2.3.7 序列化",-1)),s("li",null,[s("a",u,[n[0]||(n[0]=l("带你了解Java的序列化（Serializable）与反序列化")),o(a)])])])])}const m=e(r,[["render",d],["__file","serialization.html.vue"]]),b=JSON.parse('{"path":"/series/tech/java/basic/serialization.html","title":"Java 序列化","lang":"en-US","frontmatter":{"title":"Java 序列化","date":"2025/01/20"},"headers":[{"level":2,"title":"对象序列化（Object Serialization）","slug":"对象序列化-object-serialization","link":"#对象序列化-object-serialization","children":[]},{"level":2,"title":"Java 中的序列化","slug":"java-中的序列化","link":"#java-中的序列化","children":[{"level":3,"title":"1. Serializable 接口","slug":"_1-serializable-接口","link":"#_1-serializable-接口","children":[]},{"level":3,"title":"2. ObjectOutputStream 和 ObjectInputStream","slug":"_2-objectoutputstream-和-objectinputstream","link":"#_2-objectoutputstream-和-objectinputstream","children":[]},{"level":3,"title":"3. 序列化的细节与特性","slug":"_3-序列化的细节与特性","link":"#_3-序列化的细节与特性","children":[]},{"level":3,"title":"4. 序列化的用途","slug":"_4-序列化的用途","link":"#_4-序列化的用途","children":[]},{"level":3,"title":"5. 序列化的缺点","slug":"_5-序列化的缺点","link":"#_5-序列化的缺点","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1737884840000,"updatedTime":1737884840000,"contributors":[{"name":"柒月廿三","email":"lxang723@163.com","commits":1}]},"filePathRelative":"series/tech/java/basic/serialization.md"}');export{m as comp,b as data};
