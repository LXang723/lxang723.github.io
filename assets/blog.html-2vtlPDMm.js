import{_ as r,c as u,b as n,f as e,d as t,e as i,a as l,r as p,o as d}from"./app-CThnvBpZ.js";const c="/assets/dns-check-successful-LyxVMUOo.png",g={},b={href:"https://lxang723.blog",target:"_blank",rel:"noopener noreferrer"},k={href:"https://v2.vuepress.vuejs.org/zh/guide/introduction.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://marketplace.vuejs.press/zh/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://theme-reco.vuejs.press/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://vitepress.dev/zh/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://theme.sugarat.top/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/imsyy/vitepress-theme-curve",target:"_blank",rel:"noopener noreferrer"},H={href:"https://blog.imsyy.top/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://docs.github.com/zh/pages",target:"_blank",rel:"noopener noreferrer"},G={class:"custom-container details"},w={href:"https://v2.vuepress.vuejs.org/zh/guide/deployment.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.github.com/zh/actions",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.github.com/zh/actions/writing-workflows/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},T={href:"https://docs.github.com/zh/actions/use-cases-and-examples/building-and-testing/building-and-testing-nodejs#installing-dependencies",target:"_blank",rel:"noopener noreferrer"},A={href:"https://docs.github.com/zh/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site",target:"_blank",rel:"noopener noreferrer"},V={href:"https://docs.github.com/zh/pages/getting-started-with-github-pages/securing-your-github-pages-site-with-https",target:"_blank",rel:"noopener noreferrer"};function C(E,s){const a=p("ExternalLinkIcon"),o=p("RouteLink");return d(),u("div",null,[n("p",null,[s[1]||(s[1]=e("我的博客地址：")),n("a",b,[s[0]||(s[0]=e("lxang723.blog")),t(a)])]),s[41]||(s[41]=n("p",null,"本博客使用 VuePress 2 和 vuepress-reco 2.x 主题搭建，并通过 GitHub Pages 和 GitHub Actions 实现自动化部署。",-1)),s[42]||(s[42]=n("h2",{id:"_1-vuepress-和-reco",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-vuepress-和-reco"},[n("span",null,"1. VuePress 和 Reco")])],-1)),n("p",null,[n("a",k,[s[2]||(s[2]=e("VuePress")),t(a)]),s[6]||(s[6]=e(" 是一个以 Markdown 为中心的静态网站生成器。")),s[7]||(s[7]=n("br",null,null,-1)),s[8]||(s[8]=e(" VuePress 可以将 Markdown 文件编译为 HTML，并且根据 Markdown 文件的相对路径自动生成路由。")),s[9]||(s[9]=n("br",null,null,-1)),n("a",m,[s[3]||(s[3]=e("VuePress 市场")),t(a)]),s[10]||(s[10]=e(" 中提供很多插件与主题，")),n("a",v,[s[4]||(s[4]=e("Reco")),t(a)]),s[11]||(s[11]=e(" 则是一款简洁的 vuepress 博客 & 文档 主题。")),s[12]||(s[12]=n("br",null,null,-1)),s[13]||(s[13]=e(" Reco 主题的使用可参考：")),t(o,{to:"/blogs/other/blog/vuepress-reco.html"},{default:i(()=>s[5]||(s[5]=[e("Vuepress-Reco 的使用")])),_:1}),s[14]||(s[14]=e(" 。"))]),s[43]||(s[43]=n("p",null,"同时推荐：",-1)),n("ul",null,[n("li",null,[n("a",h,[s[15]||(s[15]=e("VitePress")),t(a)]),s[16]||(s[16]=e("：由 Vite 和 Vue 驱动的静态站点生成器。"))]),n("li",null,[n("a",f,[s[17]||(s[17]=e("@sugarat/theme")),t(a)]),s[18]||(s[18]=e(" ：简约风的 Vitepress 博客主题。"))]),n("li",null,[n("a",y,[s[19]||(s[19]=e("Curve")),t(a)]),s[21]||(s[21]=e("：A Simple VitePress Theme，以及作者博客预览 ")),n("a",H,[s[20]||(s[20]=e("無名小栈")),t(a)]),s[22]||(s[22]=e(" 。"))])]),s[44]||(s[44]=n("h2",{id:"_2-使用-github-pages-创建个人站点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-使用-github-pages-创建个人站点"},[n("span",null,"2. 使用 GitHub Pages 创建个人站点")])],-1)),s[45]||(s[45]=n("p",null,"GitHub Pages 是通过 GitHub 托管和发布的公共网页。 GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，（可选）通过构建过程运行文件，然后发布网站。",-1)),n("p",null,[n("a",P,[s[23]||(s[23]=e("GitHub Pages 文档")),t(a)])]),n("details",G,[s[27]||(s[27]=l('<summary class="custom-container-title">GitHub Pages 站点的类型</summary><p>GitHub Pages 站点共有三种类型：个人、组织和项目。</p><p><strong>个人站点（用户页面仓库）：</strong> 仓库名称为 <code>&lt;username&gt;.github.io</code> ，对应的访问地址为 <code>http(s)://&lt;username&gt;.github.io</code>。例如：仓库名称为 <code>lxang723.github.io</code> ，则访问地址为 <code>https://lxang723.github.io</code>。</p><p><strong>项目站点（项目页面仓库）：</strong> 仓库名称为 <code>&lt;repository&gt;</code> ，对应的访问地址为 <code>http(s)://&lt;username&gt;.github.io/&lt;repository&gt;</code>。 例如：仓库名称为 <code>blog</code> ，则访问地址为 <code>https://lxang723.github.io/blog</code>，会包含二级目录。</p><p>如果你有购买域名的打算，建议创建个人站点。</p>',5)),n("p",null,[s[25]||(s[25]=e("发布时，站点类型对 .vuepress\\config.ts 中的 base 也会有影响，可参考 ")),n("a",w,[s[24]||(s[24]=e("VuePress 部署")),t(a)]),s[26]||(s[26]=e(" 。"))])]),s[46]||(s[46]=l('<h3 id="_2-1-为站点创建仓库" tabindex="-1"><a class="header-anchor" href="#_2-1-为站点创建仓库"><span>2.1 为站点创建仓库</span></a></h3><ul><li>在任何页面的右上角，点击 <strong>+</strong> 按钮，点击 <code>New repository</code>，新建仓库。</li><li>在 <strong>Repository name</strong> 输入 <code>&lt;username&gt;.github.io</code>。</li><li>选择仓库可见性 <code>Public</code>。</li><li>勾选 <code>Add a README file</code>。（GitHub Pages 将查找 index.html、index.md 或 README.md 文件，作为站点的入口文件）</li><li>点击 <code>Create repository</code>，创建仓库。</li></ul><h3 id="_2-2-创建站点-配置站点的发布源" tabindex="-1"><a class="header-anchor" href="#_2-2-创建站点-配置站点的发布源"><span>2.2 创建站点（配置站点的发布源）</span></a></h3><p>必须先在 GitHub 上有站点的仓库，然后才可创建站点。</p><ul><li>在 <code>&lt;username&gt;.github.io</code> 仓库主页面中，点击 <code>Settings</code>，进入设置页面。</li><li>点击侧边栏 <strong>Code and automation</strong>（代码和自动化）下的 <code>Pages</code>，进入 <strong>GitHub Pages</strong> 配置页面。</li><li><strong>Build and deployment</strong>（构建和部署）的 <strong>Source</strong>（源）下，选择 <code>Deploy from a branch</code> （从分支进行部署）。</li><li><strong>Build and deployment</strong> 的 <strong>Branch</strong>（分支） 选择 <code>main</code>，<strong>folder</strong> 选择 <code>/(root)</code>，点击 Save 。<br> 注：后续使用 GitHub Actions 时，需将发布源切换为 <code>gh-pages</code> 分支。</li><li>点击 <code>Visit site</code>（访问网站）按钮，查看已发布的网站。</li></ul><p>上述操作只是 GitHub Pages 快速入门 。</p><hr><p>经过 2.1 和 2.2 的操作，我们已经可以看到 GitHub Pages 站点的效果了。</p><p><strong>思考：</strong></p><p>假设你已经成功运行了 vuepress-reco 2.x ，现在想要把 vuepress-reco 部署到站点，我们先要执行 <code>npm run build</code> 在 <code>.vuepress/dist</code> 文件夹下生成静态文件， 然后将静态文件上传到站点仓库中。</p><p>同时，我们也想使用这个仓库管理文章和代码，也就是文章和静态文件在同一个仓库。 我们可以使用 <code>main</code> 分支管理文章和代码，再创建一个 <code>gh-pages</code> 分支来存放生成的静态文件，将 <code>gh-pages</code> 分支作为发布源。 这样一来我们每次发布文章时，需要上传到 <code>main</code> 分支，再将静态文件上传到 <code>gh-pages</code> 分支。</p><p>现在，我们需要简化部署流程，使用 GitHub Actions 工作流来构建和部署站点源文件，实现自动化部署。<br> 在对 <code>main</code> 分支进行推送后，自动触发部署任务： 对 <code>main</code> 分支的代码进行 <code>npm install &amp;&amp; npm run build</code>，然后将 <code>.vuepress/dist</code> 文件夹下生成静态文件推送到 <code>gh-pages</code> 分支，发布站点。</p><p>这样一来，每次发布文章时，只需要推送到 <code>main</code> 分支即可，无需手动构建和部署。</p><h2 id="_3-使用-github-actions-自动部署博客" tabindex="-1"><a class="header-anchor" href="#_3-使用-github-actions-自动部署博客"><span>3. 使用 GitHub Actions 自动部署博客</span></a></h2><p>GitHub Actions 是一种持续集成和持续交付 (CI/CD) 平台，可用于自动执行生成、测试和部署管道。 你可以创建工作流，以便在推送更改到存储库时运行测试，或将合并的拉取请求部署到生产环境。</p>',15)),n("p",null,[n("a",x,[s[28]||(s[28]=e("GitHub Actions 文档")),t(a)])]),s[47]||(s[47]=l(`<h3 id="_3-1-创建个人访问令牌" tabindex="-1"><a class="header-anchor" href="#_3-1-创建个人访问令牌"><span>3.1 创建个人访问令牌</span></a></h3><p>创建 Personal access tokens (PAT)。</p><ul><li><strong>登录 GitHub，进入个人设置</strong>： 在右上角点击你的头像，然后选择 <strong>Settings</strong> 进入设置页面。</li><li><strong>进入开发者设置</strong>： 在左侧边栏中，滚动到最底部，点击 <strong>Developer Settings</strong>。</li><li><strong>创建新 Token</strong>： 在开发者设置页面，点击侧边栏 <strong>Personal access tokens</strong>，然后选择 <strong>Tokens (classic)</strong>。 点击右上角的 <code>Generate new token</code> 按钮，选择 <strong>Generate new toke (classic)</strong> 。</li><li><strong>填写 Token 详细信息</strong>：<br><strong>Note</strong>： 为这个 token 添加备注，方便你之后识别。<br><strong>Expiration</strong>： 选择 token 的有效期（可选）。如果你不希望 token 过期，可以选择 No expiration 。<br><strong>Select scopes</strong>： 勾选 <code>repo</code> 和 <code>workflow</code> 权限。</li><li><strong>生成 Token</strong>： 配置完成后，点击 <code>Generate token</code> 按钮生成 token。</li><li><strong>复制 Token</strong>： 生成后，立即复制并保存 token，因为你以后无法查看该 token。如果忘记复制，你只能重新生成一个新的 token。 点击条目进入 <strong>Edit personal access token (classic)</strong> ，点击 <code>Regenerate token</code> 按钮重新生成。</li></ul><h3 id="_3-2-设置仓库秘钥" tabindex="-1"><a class="header-anchor" href="#_3-2-设置仓库秘钥"><span>3.2 设置仓库秘钥</span></a></h3><p>设置 Repository secrets：在 GitHub Actions 中使用 Personal Access Token 。</p><ul><li>在仓库主页面中，点击 Settings &gt; <strong>Secrets and variables</strong> &gt; Actions，然后点击 <code>New repository secret</code> 按钮，添加仓库秘钥。</li><li>设置 <strong>Name</strong> 名称为 <code>ACCESS_TOKEN</code> （该名称在工作流文件中会用到），然后将生成的 token 粘贴到 <strong>Secret</strong>（修改时值为 Value） 栏中 。</li></ul><h3 id="_3-3-配置工作流权限" tabindex="-1"><a class="header-anchor" href="#_3-3-配置工作流权限"><span>3.3 配置工作流权限</span></a></h3><p>GitHub Actions 在将静态文件推送到 gh-pages 分支时需要写入权限。</p><ul><li>在仓库主页面中，进入 Settings &gt; <strong>Actions</strong> &gt; General 。</li><li>将 <strong>Workflow permissions</strong> 设置为 <code>Read and write permissions</code>。</li></ul><p>也可以在工作流文件中添加权限。</p><h3 id="_3-4-编写工作流文件" tabindex="-1"><a class="header-anchor" href="#_3-4-编写工作流文件"><span>3.4 编写工作流文件</span></a></h3><p>在 vuepress-reco 项目根目录下，创建 <code>.github/workflows/deploy.yml</code> 的文件，定义自动部署流程。</p><div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">Note</p><p>若要使 GitHub 在存储库中发现任何 GitHub Actions 工作流，必须将工作流文件保存在名为 .github/workflows 的目录中。</p><p>你可以为工作流文件指定所需的任何名称，但必须使用 .yml 或 .yaml 作为文件扩展名。</p></div><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"></span>
<span class="line"><span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy VuePress Site</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 触发条件：在 push 到 main  分支后</span></span>
<span class="line"><span class="token key atrule">on</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">push</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">branches</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> main</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 任务</span></span>
<span class="line"><span class="token key atrule">jobs</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 服务器环境：最新版 Ubuntu</span></span>
<span class="line">    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest</span>
<span class="line">    <span class="token key atrule">steps</span><span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment"># 拉取代码</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout code</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">fetch-depth</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">      </span>
<span class="line">      <span class="token comment"># 设置 Node.js</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Node.js</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">20</span></span>
<span class="line">          <span class="token comment"># 启用缓存，加速构建，提高效率</span></span>
<span class="line">          <span class="token key atrule">cache</span><span class="token punctuation">:</span> npm</span>
<span class="line">      </span>
<span class="line">      <span class="token comment"># 可以使用 npm install &amp;&amp; npm run build 将两步合并</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install</span>
<span class="line">      </span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build VuePress site</span>
<span class="line">        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build</span>
<span class="line"></span>
<span class="line">      <span class="token comment"># 部署到 GitHub Pages</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy to GitHub Pages</span>
<span class="line">        <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@v4</span>
<span class="line">        <span class="token key atrule">with</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line">          <span class="token key atrule">BRANCH</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages</span>
<span class="line">          <span class="token key atrule">FOLDER</span><span class="token punctuation">:</span> .vuepress/dist</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：<code>cache: npm</code>：可以缓存依赖项来加快工作流运行。 默认情况下，会根据锁定文件（ package-lock.json 或 yarn.lock ）等文件生成唯一的缓存键。 所以项目中的 package-lock.json 需提交到 Git 仓库中。</p>`,15)),n("p",null,[s[32]||(s[32]=n("strong",null,"参考",-1)),s[33]||(s[33]=e("：")),s[34]||(s[34]=n("br",null,null,-1)),n("a",S,[s[29]||(s[29]=e("GitHub Actions 的工作流语法")),t(a)]),s[35]||(s[35]=n("br",null,null,-1)),n("a",T,[s[30]||(s[30]=e("构建和测试 Node.js")),t(a)]),s[36]||(s[36]=n("br",null,null,-1)),n("a",A,[s[31]||(s[31]=e("缓存依赖项以加快工作流程")),t(a)])]),s[48]||(s[48]=n("hr",null,null,-1)),s[49]||(s[49]=n("p",null,[e("完成以上步骤后，每次将文章推送到 "),n("code",null,"main"),e(" 分支，GitHub Actions 会自动触发工作流，构建并部署静态文件到 GitHub Pages。")],-1)),s[50]||(s[50]=n("p",null,[e("可以在仓库主页面的 "),n("code",null,"Actions"),e(" 查看工作流程结果。")],-1)),s[51]||(s[51]=n("h2",{id:"_4-使用自定义域名",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-使用自定义域名"},[n("span",null,"4. 使用自定义域名")])],-1)),s[52]||(s[52]=n("p",null,"GitHub Pages 支持使用自定义域名，或者将网站的 URL 根目录从默认值（如 lxang723.github.io）更改为你拥有的任何域名。",-1)),n("p",null,[n("a",N,[s[37]||(s[37]=e("管理 GitHub Pages 站点的自定义域")),t(a)])]),s[53]||(s[53]=n("h3",{id:"dns-配置参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dns-配置参考"},[n("span",null,"DNS 配置参考")])],-1)),n("ul",null,[n("li",null,[t(o,{to:"/blogs/other/blog/namesilo.html"},{default:i(()=>s[38]||(s[38]=[e("NameSilo 的使用")])),_:1})]),n("li",null,[t(o,{to:"/blogs/other/blog/cloudflare.html"},{default:i(()=>s[39]||(s[39]=[e("Cloudflare 的使用")])),_:1})])]),s[54]||(s[54]=l('<p>如果从自定义 GitHub Actions 工作流进行发布，则忽略且无需任何 CNAME 文件。</p><h3 id="设置自定义域名" tabindex="-1"><a class="header-anchor" href="#设置自定义域名"><span>设置自定义域名</span></a></h3><ul><li>在仓库主页面中，点击 <strong>Settings &gt; Pages</strong>，进入 <strong>GitHub Pages</strong> 配置页面。</li><li>在 <strong>Custom domain</strong> 输入框中，输入你自己的域名，点击 <code>Save</code> 保存设置 。</li></ul><p>保存之后 GitHub Pages 会自动检测。</p><p>等待变绿， <strong>DNS Check in Progress</strong>（黄色） -&gt; <strong>DNS check successful</strong>（绿色）。</p><p><img src="'+c+'" alt="DNS check successful"></p><h3 id="使用-https-保护-github-pages-站点" tabindex="-1"><a class="header-anchor" href="#使用-https-保护-github-pages-站点"><span>使用 HTTPS 保护 GitHub Pages 站点</span></a></h3><p>等待发放 TLS 证书， 此时的 <strong>Enforce HTTPS</strong> 为禁用状态。</p><p>发放 TLS 证书后，勾选 <strong>Enforce HTTPS</strong> 。</p>',9)),n("p",null,[n("a",V,[s[40]||(s[40]=e("使用 HTTPS 保护 GitHub Pages 站点")),t(a)])])])}const j=r(g,[["render",C],["__file","blog.html.vue"]]),D=JSON.parse('{"path":"/blogs/other/blog/blog.html","title":"我的博客搭建之路","lang":"en-US","frontmatter":{"sticky":2,"title":"我的博客搭建之路","date":"2024-11-12T00:00:00.000Z","categories":["Other"],"tags":["Blog"]},"headers":[{"level":2,"title":"1. VuePress 和 Reco","slug":"_1-vuepress-和-reco","link":"#_1-vuepress-和-reco","children":[]},{"level":2,"title":"2. 使用 GitHub Pages 创建个人站点","slug":"_2-使用-github-pages-创建个人站点","link":"#_2-使用-github-pages-创建个人站点","children":[{"level":3,"title":"2.1 为站点创建仓库","slug":"_2-1-为站点创建仓库","link":"#_2-1-为站点创建仓库","children":[]},{"level":3,"title":"2.2 创建站点（配置站点的发布源）","slug":"_2-2-创建站点-配置站点的发布源","link":"#_2-2-创建站点-配置站点的发布源","children":[]}]},{"level":2,"title":"3. 使用 GitHub Actions 自动部署博客","slug":"_3-使用-github-actions-自动部署博客","link":"#_3-使用-github-actions-自动部署博客","children":[{"level":3,"title":"3.1 创建个人访问令牌","slug":"_3-1-创建个人访问令牌","link":"#_3-1-创建个人访问令牌","children":[]},{"level":3,"title":"3.2 设置仓库秘钥","slug":"_3-2-设置仓库秘钥","link":"#_3-2-设置仓库秘钥","children":[]},{"level":3,"title":"3.3 配置工作流权限","slug":"_3-3-配置工作流权限","link":"#_3-3-配置工作流权限","children":[]},{"level":3,"title":"3.4 编写工作流文件","slug":"_3-4-编写工作流文件","link":"#_3-4-编写工作流文件","children":[]}]},{"level":2,"title":"4. 使用自定义域名","slug":"_4-使用自定义域名","link":"#_4-使用自定义域名","children":[{"level":3,"title":"DNS 配置参考","slug":"dns-配置参考","link":"#dns-配置参考","children":[]},{"level":3,"title":"设置自定义域名","slug":"设置自定义域名","link":"#设置自定义域名","children":[]},{"level":3,"title":"使用 HTTPS 保护 GitHub Pages 站点","slug":"使用-https-保护-github-pages-站点","link":"#使用-https-保护-github-pages-站点","children":[]}]}],"git":{"createdTime":1736081154000,"updatedTime":1736596880000,"contributors":[{"name":"柒月廿三","email":"lxang723@163.com","commits":3}]},"filePathRelative":"blogs/other/blog/blog.md"}');export{j as comp,D as data};
