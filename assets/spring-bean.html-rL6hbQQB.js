import{_ as a,c as s,f as e,o as l}from"./app-CiE5TDcB.js";const i={};function o(t,n){return l(),s("div",null,n[0]||(n[0]=[e(`<h2 id="bean-的概念" tabindex="-1"><a class="header-anchor" href="#bean-的概念"><span>Bean 的概念</span></a></h2><p>在 Spring 中，<u>被 IoC 容器管理的对象称为 Bean</u>。<br> Bean 是 Spring 应用的基本组成单元，Spring 容器负责创建、配置和管理这些 Bean。</p><h2 id="将类声明为-bean-的注解" tabindex="-1"><a class="header-anchor" href="#将类声明为-bean-的注解"><span>将类声明为 Bean 的注解</span></a></h2><p>以下是常用的将类声明为 Bean 的注解：</p><ol><li><strong>通用注解</strong>：<code>@Component</code></li><li><strong>分层架构专用注解</strong>：<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code></li><li><strong>Java 配置类注解</strong>：<code>@Bean</code>、<code>@Configuration</code></li><li><strong>其他相关注解</strong>：<code>@Scope</code></li></ol><p>选择合适的注解可以提高代码的可读性，并明确类的职责和层次。例如，<code>@Service</code> 用于服务层，<code>@Repository</code> 用于数据访问层，<code>@Controller</code> 用于控制器层，而 <code>@Component</code> 用于通用组件。</p><h3 id="_1-通用注解" tabindex="-1"><a class="header-anchor" href="#_1-通用注解"><span>1. <strong>通用注解</strong></span></a></h3><ul><li><p><strong><code>@Component</code></strong><br> 通用的注解，用于标记一个类为 Spring 管理的 Bean。通常用于普通的组件类。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// class body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-分层架构中的专用注解" tabindex="-1"><a class="header-anchor" href="#_2-分层架构中的专用注解"><span>2. <strong>分层架构中的专用注解</strong></span></a></h3><p>Spring 提供了更细化的注解，用于区分不同层次的组件，这些注解本质上是 <code>@Component</code> 的特殊化形式：</p><ul><li><p><strong><code>@Service</code></strong><br> 用于标记服务层（Service Layer）的类，表示业务逻辑组件。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// class body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>@Repository</code></strong><br> 用于标记数据访问层（DAO 层）的类，通常与数据库操作相关。Spring 会为 <code>@Repository</code> 注解的类提供额外的异常转换支持（将数据库异常转换为 Spring 的统一异常）。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Repository</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRepository</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// class body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>@Controller</code></strong><br> 用于标记控制器层（Controller Layer）的类，通常用于处理 HTTP 请求（如 Spring MVC 中的控制器）。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Controller</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// class body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-java-配置类中的注解" tabindex="-1"><a class="header-anchor" href="#_3-java-配置类中的注解"><span>3. <strong>Java 配置类中的注解</strong></span></a></h3><ul><li><p><strong><code>@Bean</code></strong><br> 用于在 Java 配置类中声明一个 Bean。通常用于配置类中定义第三方库的类或需要自定义初始化的 Bean。</p></li><li><p><strong><code>@Configuration</code></strong><br> 用于标记一个类为配置类，通常与 <code>@Bean</code> 注解一起使用，定义多个 Bean。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyBean</span> <span class="token function">myBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-其他相关注解" tabindex="-1"><a class="header-anchor" href="#_4-其他相关注解"><span>4. <strong>其他相关注解</strong></span></a></h3><ul><li><p><strong><code>@Scope</code></strong><br> 用于指定 Bean 的作用域（如单例、原型等），可以与上述任何注解一起使用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// class body</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="相关面试题" tabindex="-1"><a class="header-anchor" href="#相关面试题"><span>相关面试题</span></a></h2><h3 id="component-和-bean-的区别是什么" tabindex="-1"><a class="header-anchor" href="#component-和-bean-的区别是什么"><span>@Component 和 @Bean 的区别是什么？</span></a></h3><ul><li>如果是自己编写的类，优先使用 <code>@Component</code> 或其派生注解（如 <code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>）。</li><li>如果需要将第三方库的类或需要自定义初始化的对象注册为 Bean，使用 <code>@Bean</code>。</li></ul><h3 id="注入-bean-的注解有哪些" tabindex="-1"><a class="header-anchor" href="#注入-bean-的注解有哪些"><span>注入 Bean 的注解有哪些？</span></a></h3><h3 id="autowired-和-resource-的区别是什么" tabindex="-1"><a class="header-anchor" href="#autowired-和-resource-的区别是什么"><span>@Autowired 和 @Resource 的区别是什么？</span></a></h3>`,20)]))}const c=a(i,[["render",o],["__file","spring-bean.html.vue"]]),r=JSON.parse('{"path":"/series/tech/framework/spring/spring-bean.html","title":"Spring Bean","lang":"en-US","frontmatter":{"title":"Spring Bean"},"headers":[{"level":2,"title":"Bean 的概念","slug":"bean-的概念","link":"#bean-的概念","children":[]},{"level":2,"title":"将类声明为 Bean 的注解","slug":"将类声明为-bean-的注解","link":"#将类声明为-bean-的注解","children":[{"level":3,"title":"1. 通用注解","slug":"_1-通用注解","link":"#_1-通用注解","children":[]},{"level":3,"title":"2. 分层架构中的专用注解","slug":"_2-分层架构中的专用注解","link":"#_2-分层架构中的专用注解","children":[]},{"level":3,"title":"3. Java 配置类中的注解","slug":"_3-java-配置类中的注解","link":"#_3-java-配置类中的注解","children":[]},{"level":3,"title":"4. 其他相关注解","slug":"_4-其他相关注解","link":"#_4-其他相关注解","children":[]}]},{"level":2,"title":"相关面试题","slug":"相关面试题","link":"#相关面试题","children":[{"level":3,"title":"@Component 和 @Bean 的区别是什么？","slug":"component-和-bean-的区别是什么","link":"#component-和-bean-的区别是什么","children":[]},{"level":3,"title":"注入 Bean 的注解有哪些？","slug":"注入-bean-的注解有哪些","link":"#注入-bean-的注解有哪些","children":[]},{"level":3,"title":"@Autowired 和 @Resource 的区别是什么？","slug":"autowired-和-resource-的区别是什么","link":"#autowired-和-resource-的区别是什么","children":[]}]}],"git":{"createdTime":1739512436000,"updatedTime":1739512436000,"contributors":[{"name":"柒月廿三","email":"lxang723@163.com","commits":1}]},"filePathRelative":"series/tech/framework/spring/spring-bean.md"}');export{c as comp,r as data};
