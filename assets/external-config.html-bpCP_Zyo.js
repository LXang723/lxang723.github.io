import{_ as n,c as p,a as r,b as o,d as i,e as l,o as c,r as a}from"./app-CM0_pNGp.js";const s={},d={href:"https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/features.html#features.external-config.files",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/features.html#features.external-config",target:"_blank",rel:"noopener noreferrer"};function f(m,e){const t=a("ExternalLinkIcon");return c(),p("div",null,[e[4]||(e[4]=r('<h2 id="简单优先级" tabindex="-1"><a class="header-anchor" href="#简单优先级"><span>简单优先级</span></a></h2><p><strong>命令行参数</strong> &gt; <strong>Java 系统属性</strong> &gt; <strong>操作系统环境变量</strong> &gt; <strong>配置数据文件</strong> 。</p><p><strong>外部 profile 文件</strong> &gt; <strong>内部 profile 文件</strong> &gt; <strong>外部通用文件</strong> &gt; <strong>内部通用文件</strong>。</p><p><strong>总结</strong>：</p><ul><li>动态参数 &gt; 静态文件：命令行参数、系统属性和环境变量的优先级高于配置数据文件</li><li>JAR 外部（项目根路径） &gt; JAR 内部（类路径）</li><li>同级目录的 <code>/config</code> 子目录下的 &gt; 同级目录下的</li><li>profile 文件（被激活时） &gt; 通用文件</li></ul><p><strong>项目根路径（outside of packaged jar）</strong>:</p><ul><li>file:/config/application-{profile}.yml <code>active</code></li><li>file:/config/application.yml</li><li>file:application-{profile}.yml <code>active</code></li><li>file:application.yml</li></ul><p><strong>类路径（packaged inside jar）</strong>:</p><ul><li>classpath:/config/application-{profile}.yml <code>active</code></li><li>classpath:/config/application.yml</li><li>classpath:/application-{profile}.yml <code>active</code></li><li>classpath:/application.yml</li></ul>',9)),o("p",null,[e[1]||(e[1]=i("Spring Boot Reference Documentation：")),o("a",d,[e[0]||(e[0]=i("External Application Properties")),l(t)])]),e[5]||(e[5]=o("h2",{id:"完整优先级",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#完整优先级"},[o("span",null,"完整优先级")])],-1)),o("p",null,[e[3]||(e[3]=i("Spring Boot Reference Documentation：")),o("a",g,[e[2]||(e[2]=i("Externalized Configuration（外部化配置）")),l(t)])]),e[6]||(e[6]=r('<div class="custom-container info"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">外部化配置</p><p>Spring Boot 允许您将配置外部化，以便您可以在不同的环境中使用相同的应用程序代码。您可以使用多种外部配置源，包括 Java 属性文件、YAML 文件、环境变量和命令行参数。</p><p>属性值可以通过使用 <code>@Value</code> 注解直接注入到您的 bean 中，通过 Spring 的 <code>Environment</code> 抽象访问，或者通过 <code>@ConfigurationProperties</code> 绑定到结构化对象。</p><p>Spring Boot 使用一种非常特定的 <code>PropertySource</code> 顺序，旨在允许合理地覆盖值。<u>后面的属性源可以覆盖前面定义的属性值。</u>属性源按以下顺序考虑：</p><ol><li>默认属性（通过 <code>SpringApplication.setDefaultProperties</code> 设置）。</li><li><code>@Configuration</code> 类上的 <code>@PropertySource</code> 注解。请注意，这些属性源在应用程序上下文刷新之前不会添加到 <code>Environment</code> 中。这对于配置某些属性（如 <code>logging.*</code> 和 <code>spring.main.*</code>）来说为时已晚，因为这些属性在刷新开始之前就已经被读取。</li><li>配置数据（如 <code>application.properties</code> 文件）。</li><li><code>RandomValuePropertySource</code>，仅在 <code>random.*</code> 中具有属性。</li><li>操作系统环境变量。</li><li>Java 系统属性（<code>System.getProperties()</code>）。</li><li>来自 <code>java:comp/env</code> 的 JNDI 属性。</li><li><code>ServletContext</code> 初始化参数。</li><li><code>ServletConfig</code> 初始化参数。</li><li>来自 <code>SPRING_APPLICATION_JSON</code> 的属性（嵌入在环境变量或系统属性中的内联 JSON）。</li><li>命令行参数。</li><li>测试中的 <code>properties</code> 属性。可用于 <code>@SpringBootTest</code> 和测试特定应用程序切片的测试注解。</li><li>测试中的 <code>@DynamicPropertySource</code> 注解。</li><li>测试中的 <code>@TestPropertySource</code> 注解。</li><li>当 devtools 激活时，<code>$HOME/.config/spring-boot</code> 目录中的 Devtools 全局设置属性。</li></ol><p>配置数据文件按以下顺序考虑：</p><ol><li>打包在您的 jar 中的应用程序属性（<code>application.properties</code> 和 YAML 变体）。</li><li>打包在您的 jar 中的特定于配置文件的应用程序属性（<code>application-{profile}.properties</code> 和 YAML 变体）。</li><li>打包在您的 jar 之外的应用程序属性（<code>application.properties</code> 和 YAML 变体）。</li><li>打包在您的 jar 之外的特定于配置文件的应用程序属性（<code>application-{profile}.properties</code> 和 YAML 变体）。</li></ol></div><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">Note</p><p>It is recommended to stick with one format for your entire application. If you have configuration files with both <code>.properties</code> and YAML format in the same location, <code>.properties</code> takes precedence.</p><p>建议在整个应用程序中坚持使用一种格式。 如果在同一位置同时存在 <code>.properties</code> 和 YAML 格式的配置文件， <code>.properties</code> 文件将优先被使用。</p></div><p>当 <code>application.properties</code> 和 <code>application.yml</code> 同时存在，同样的参数，最终生效的是 <code>application.properties</code> 中的配置。</p><h2 id="bootstrap" tabindex="-1"><a class="header-anchor" href="#bootstrap"><span>bootstrap</span></a></h2><p>bootstrap 配置文件是 Spring Cloud 项目中的特殊配置文件，用于在应用程序启动的早期阶段加载配置。它通常用于从外部配置源（如 Spring Cloud Config Server）获取配置。</p><p>bootstrap.yml &gt; application.yml</p>',6))])}const h=n(s,[["render",f],["__file","external-config.html.vue"]]),v=JSON.parse('{"path":"/series/interview/spring-boot/external-config.html","title":"Spring Boot 配置文件加载优先级","lang":"en-US","frontmatter":{"title":"Spring Boot 配置文件加载优先级"},"headers":[{"level":2,"title":"简单优先级","slug":"简单优先级","link":"#简单优先级","children":[]},{"level":2,"title":"完整优先级","slug":"完整优先级","link":"#完整优先级","children":[]},{"level":2,"title":"bootstrap","slug":"bootstrap","link":"#bootstrap","children":[]}],"git":{"createdTime":1748218348000,"updatedTime":1748218348000,"contributors":[{"name":"柒月廿三","email":"lxang723@163.com","commits":1}]},"filePathRelative":"series/interview/spring-boot/external-config.md"}');export{h as comp,v as data};
